/**
 * @author Behzad Tabibian
 *
 */

#include <alcommon/alproxy.h>
#include <alvalue/alvalue.h>
#include <alcore/alptr.h>
#include <alcommon/albroker.h>
#include <alcommon/almodule.h>
#include <alproxies/almemoryproxy.h>
#include "logger.h"

#include <fstream>

#include <boost/config.hpp>
#include <boost/algorithm/string.hpp>
#include <boost/program_options/detail/config_file.hpp>
#include <boost/program_options/parsers.hpp>
#include "Message.h"
#include "LocationMessage.h"
#include "ALMessages.h"
#include "movementMessage.h"
#include "GeneralALMessage.h"
#include <stdlib.h>

namespace pod=boost::program_options::detail;

//______________________________________________
// constructor
//______________________________________________
Logger::Logger(AL::ALPtr<AL::ALBroker> broker, const std::string& name ): AL::ALModule(broker, name ),motion(false)
{
    setModuleDescription( "This is an autogenerated module, this descriptio needs to be updated. " );
}

void Logger::init()
{
    try
    {
    _connection=new tcp_server(1100);
    }
    catch(std::exception& ex)
    {
        std::cout<<"Communication Port in use, closing logger"<<std::endl;
    }

    std::cout<<"<<--------------------------- Starting Logger ------------------------------->>"<<std::endl;
    srand(time(NULL));
    _connection->startasync();
    memoryProPtr=getParentBroker()->getMemoryProxy();

    if(!Loadconfig())
           return;
    WorkerThread=new boost::thread(boost::bind(&Logger::Observer,this));

}

//______________________________________________
// destructor
//______________________________________________
Logger::~Logger()
{
WorkerThread->interrupt();
WorkerThread->join();
}
template <typename T>
void Logger::sendLog(T& data)
{
    Message k(name);
    k.setData(data);
    _connection->sendData(k);
}

void Logger::motionLogger()
{
    std::vector<float> pos= motionProPtr->getRobotPosition(false);
    locationMessage msg(motionType);
    msg.x=pos[0];
    msg.y=pos[1];
    msg.theta=pos[2];


    std::cout<<"Motion:"<<msg.x<<","<<msg.y<<","<<msg.theta<<std::endl;
    sendLog(msg);

}
void Logger::Observer()
{
#ifdef DEBUG_CONFIG
    try
    {
      if(motion)
      {
            mLocalisation=getParentBroker()->getProxy("Localisation");
      }
    }
    catch(std::exception& ex)
    {
        std::cout<<ex.what()<<std::endl;
    }

#endif
    while(1)
    {
        try
        {

        AL::ALValue alname;
        AL::ALValue childname=this->name;
        alname.arrayPush(childname);
        memoryProPtr->insertData("SName",alname);
        if (motion)
        {
            motionLogger();
        }
        std::vector<Element>::iterator begin=customModules.begin();
        for(std::vector<Element>::iterator i=begin;i<customModules.end();i++)
        {
            try
            {
                AL::ALValue val= memoryProPtr->getData(i->element_add);

                if(i->element_add=="movement")
                {
                    movementMessage msg= ALMessages::readMovementfromMemory(val);
                    sendLog(msg);
                    continue;
                }
                if(i->element_add=="location")
                {
                    locationMessage msg= ALMessages::readLocationfromMemory(val,"location");
                    sendLog(msg);
                    continue;
                }
                generalAlMessage msg= ALMessages::readgeneralfromMemory(val,i->element_tag);
                sendLog(msg);
                continue;
            }
            catch(std::exception& ex)
            {
                continue;
            }

        }
        boost::this_thread::interruption_point();
        boost::this_thread::sleep(boost::posix_time::milliseconds(200));


        }
        catch(std::exception ex)
        {
            continue;
        }
    }
}

bool Logger::Loadconfig()
{

    std::ifstream configFile("/home/nao/data/Logger_Config.txt");

    if(!configFile)
    {
        std::cout<<"Error loading config file"<<std::endl;
        return false;
    }
    std::cout<<"Loading cofiguration variables"<<std::endl;
    std::set<std::string> options;
    options.insert("*");

    try
    {
        for (pod::config_file_iterator i(configFile,options),ex;i!=ex;++i)
        {
            if (std::strcmp(i->string_key.c_str(),"Logger.Name")==0)
            {
                name=i->value[0];
                std::cout<<"My name is "<< i->value[0]<<std::endl;
                continue;

            }
            if (std::strcmp(i->string_key.c_str(),"Logger.ALMotion")==0)
            {
                motionProPtr=getParentBroker()->getMotionProxy();
                motion=true;
                motionType=i->value[0];
                std::cout<<motionType<<std::endl;
                continue;

            }
            Element g;
            std::string test="Logger.";
            g.element_add=i->string_key.substr(test.length(),i->string_key.size()-test.length());
            g.element_tag=i->value[0];
            customModules.push_back(g);
        }
	std::cout<<"end of loading cofiguration variables"<<std::endl;
    }
    catch(std::exception& ex)
    {
        std::cout<<"Something went wrong while loading config file:"<<ex.what()<<std::endl;
        configFile.close();
    }
    configFile.close();
    return true;
}
